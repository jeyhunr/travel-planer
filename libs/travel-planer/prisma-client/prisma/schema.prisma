generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "../src/generated/validator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../../../docs/prisma-docs"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../../data-model/src/generated/dto/interfaces.ts"
  prettier = "true"
}

generator typescriptInterfacesJson {
  provider    = "prisma-generator-typescript-interfaces"
  output      = "../../data-model/src/generated/dto/json-interfaces.ts"
  bigIntType  = "string"
  bytesType   = "ArrayObject"
  dateType    = "string"
  decimalType = "string"
  exportEnums = "false"
  modelSuffix = "Json"
  prettier    = "true"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid       String    @id @default(uuid()) @map("uid")
  username  String    @unique @map("username")
  isAdmin   Boolean   @default(false) @map("is_admin")
  email     String    @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  tokens Token[]
  posts  CoffeeReading[]

  @@map("users")
}

model Token {
  uid       String   @id @default(uuid()) @map("uid")
  token     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  User      User?    @relation(fields: [userUid], references: [uid])
  userUid   String?

  @@map("tokens")
}

model CoffeeReading {
  uid                   String           @id @default(uuid())
  language              String
  overallInterpretation String           @map("overall_interpretation") @db.Text()
  isShared              Boolean          @default(false) @map("is_shared")
  symbols               SymbolDetected[]
  imageUrl              String           @map("image_url")
  createdAt             DateTime         @default(now()) @map("created_at")
  User                  User?            @relation(fields: [userUid], references: [uid])
  userUid               String?          @map("user_uid")

  @@map("coffee_readings")
}

model SymbolDetected {
  uid         String @id @default(uuid())
  shape       String
  position    String
  description String
  meaning     String

  readingId String        @map("reading_id")
  reading   CoffeeReading @relation(fields: [readingId], references: [uid])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("symbol_detected")
}
